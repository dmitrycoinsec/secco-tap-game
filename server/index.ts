import express from 'express';
import cors from 'cors';
import { TonHttpApiClient } from '../lib/TonHttpApiClient';

const app = express();
const port = process.env.PORT || 3001;

// Middleware
app.use(cors());
app.use(express.json());

// TON HTTP API Client
const tonClient = new TonHttpApiClient(
    process.env.TON_API_KEY || '', 
    process.env.NODE_ENV === 'development' // testnet –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
);

// –í–∞—à –∫–æ—à–µ–ª–µ–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–ª–∞—Ç–µ–∂–µ–π
const OWNER_WALLET = 'UQBOxIuUPXHOu1fY0O7uGe9yIIaa0-DRcLIk2qVNa_0tZbFD';

// –ê–¥—Ä–µ—Å —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞ (–æ–±–Ω–æ–≤–∏—Ç—Å—è –ø–æ—Å–ª–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è)
const CONTRACT_ADDRESS = process.env.CONTRACT_ADDRESS || OWNER_WALLET;

// –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ PostgreSQL/MongoDB)
interface UserData {
    walletAddress: string;
    balance: number;
    energy: number;
    level: number;
    xp: number;
    lastEnergyUpdate: Date;
}

const usersDB = new Map<string, UserData>();

// Endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
app.get('/api/user/:walletAddress', async (req, res) => {
    try {
        const { walletAddress } = req.params;
        
        let userData = usersDB.get(walletAddress);
        if (!userData) {
            // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            userData = {
                walletAddress,
                balance: 0,
                energy: 100,
                level: 1,
                xp: 0,
                lastEnergyUpdate: new Date()
            };
            usersDB.set(walletAddress, userData);
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏ (–∫–∞–∂–¥—ã–µ 12 —á–∞—Å–æ–≤)
        const now = new Date();
        const timeDiff = now.getTime() - userData.lastEnergyUpdate.getTime();
        const hoursPassed = timeDiff / (1000 * 60 * 60);
        
        if (hoursPassed >= 12) {
            userData.energy = 100;
            userData.lastEnergyUpdate = now;
            usersDB.set(walletAddress, userData);
        }
        
        res.json(userData);
    } catch (error) {
        console.error('Error getting user data:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// Endpoint –¥–ª—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–æ–∫—É–ø–∫–∏ —ç–Ω–µ—Ä–≥–∏–∏
app.post('/api/validate-energy-purchase', async (req, res) => {
    try {
        const { txHash, walletAddress, energyAmount, tonAmount } = req.body;
        
        console.log(`üîç Validating energy purchase:`, {
            txHash: txHash?.slice(0, 16) + '...',
            walletAddress: walletAddress?.slice(0, 10) + '...',
            energyAmount,
            tonAmount
        });
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é —á–µ—Ä–µ–∑ TON HTTP API
        const validation = await tonClient.validateEnergyPurchase(
            txHash,
            walletAddress,
            CONTRACT_ADDRESS,
            tonAmount
        );
        
        if (!validation.isValid) {
            console.log(`‚ùå Transaction validation failed:`, validation.error);
            return res.status(400).json({ error: validation.error });
        }
        
        console.log(`‚úÖ Transaction validated successfully`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const userData = usersDB.get(walletAddress);
        if (userData) {
            userData.energy = Math.min(100, userData.energy + energyAmount);
            usersDB.set(walletAddress, userData);
            
            console.log(`üéÆ Energy updated for ${walletAddress.slice(0, 10)}...: +${energyAmount} energy`);
            res.json({ 
                success: true, 
                newEnergy: userData.energy,
                txHash,
                transaction: validation.transaction
            });
        } else {
            res.status(404).json({ error: 'User not found' });
        }
        
    } catch (error) {
        console.error('‚ùå Error validating energy purchase:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// Endpoint –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–≥—Ä–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
app.post('/api/update-game-data', async (req, res) => {
    try {
        const { walletAddress, balance, energy, level, xp } = req.body;
        
        const userData = usersDB.get(walletAddress);
        if (userData) {
            userData.balance = balance;
            userData.energy = energy;
            userData.level = level;
            userData.xp = xp;
            usersDB.set(walletAddress, userData);
            
            res.json({ success: true });
        } else {
            res.status(404).json({ error: 'User not found' });
        }
    } catch (error) {
        console.error('Error updating game data:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// Endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç–∞
app.get('/api/contract-stats', async (req, res) => {
    try {
        console.log(`üìä Getting contract stats for: ${CONTRACT_ADDRESS}`);
        
        // –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —á–µ—Ä–µ–∑ TON HTTP API
        const walletStats = await tonClient.monitorWalletPayments(OWNER_WALLET);
        
        res.json({
            ownerWallet: OWNER_WALLET,
            contractAddress: CONTRACT_ADDRESS,
            totalEnergyPayments: walletStats.totalEnergyPayments,
            energyTransactionsCount: walletStats.energyTransactions.length,
            totalBalance: walletStats.totalBalance,
            recentTransactions: walletStats.energyTransactions.slice(0, 10),
            lastUpdate: new Date().toISOString()
        });
        
    } catch (error) {
        console.error('‚ùå Error getting contract stats:', error);
        res.status(500).json({ error: 'Internal server error' });
    }
});

// –§—É–Ω–∫—Ü–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ —ç–Ω–µ—Ä–≥–∏–∏
function validateEnergyTransaction(
    transaction: any,
    walletAddress: string,
    energyAmount: number,
    tonAmount: number
): boolean {
    try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –æ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞
        if (transaction.inMessage?.source?.toString() !== walletAddress) {
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É–º–º—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
        const expectedAmount = getExpectedTonAmount(energyAmount);
        if (Math.abs(tonAmount - expectedAmount) > 0.01) { // –¥–æ–ø—É—Å–∫ –Ω–∞ –≥–∞–∑
            return false;
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º op code –≤ —Ç–µ–ª–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        const expectedOpCode = getExpectedOpCode(energyAmount);
        // –ó–¥–µ—Å—å –Ω—É–∂–Ω–æ –ø–∞—Ä—Å–∏—Ç—å —Ç–µ–ª–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å op code
        
        return true;
    } catch (error) {
        console.error('Error validating transaction:', error);
        return false;
    }
}

function getExpectedTonAmount(energyAmount: number): number {
    switch (energyAmount) {
        case 25: return 0.5;
        case 50: return 1.0;
        case 100: return 2.0;
        default: return 0;
    }
}

function getExpectedOpCode(energyAmount: number): number {
    switch (energyAmount) {
        case 25: return 0x12345601;
        case 50: return 0x12345602;
        case 100: return 0x12345603;
        default: return 0;
    }
}

app.listen(port, () => {
    console.log(`üöÄ SECCO API Server running on port ${port}`);
    console.log(`ÔøΩ Owner wallet: ${OWNER_WALLET}`);
    console.log(`ÔøΩüì± Contract address: ${CONTRACT_ADDRESS}`);
    console.log(`üîó TON HTTP API: ${tonClient.testnet ? 'testnet' : 'mainnet'}`);
    console.log(`üîë API Key configured: ${process.env.TON_API_KEY ? 'Yes' : 'No'}`);
});
