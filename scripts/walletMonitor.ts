import { TonHttpApiClientNoKey } from '../lib/TonHttpApiClientNoKey';

// –í–∞—à –∫–æ—à–µ–ª–µ–∫ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
const YOUR_WALLET = 'UQBOxIuUPXHOu1fY0O7uGe9yIIaa0-DRcLIk2qVNa_0tZbFD';

// TON HTTP API Client (–≤–µ—Ä—Å–∏—è –±–µ–∑ –∫–ª—é—á–∞ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
const tonClient = new TonHttpApiClientNoKey(false); // false = mainnet

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
async function monitorWalletTransactions() {
    try {
        console.log(`üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–æ—à–µ–ª—å–∫–∞: ${YOUR_WALLET}`);
        console.log(`üìä –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏—è –æ—Ç –ø–æ–∫—É–ø–æ–∫ —ç–Ω–µ—Ä–≥–∏–∏...\n`);

        // –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π –º–µ—Ç–æ–¥ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        const walletStats = await tonClient.monitorWalletPayments(YOUR_WALLET);

        console.log(`üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ—à–µ–ª—å–∫–∞:\n`);

        walletStats.energyTransactions.forEach((tx, index) => {
            console.log(`üí∞ [–≠–ù–ï–†–ì–ò–Ø] +${tx.amount.toFixed(2)} TON`);
            console.log(`   –û—Ç: ${tx.from ? tx.from.slice(0, 10) + '...' : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
            console.log(`   –í—Ä–µ–º—è: ${new Date(tx.timestamp * 1000).toLocaleString('ru-RU')}`);
            console.log(`   –•—ç—à: ${tx.hash.slice(0, 16)}...\n`);
        });

        console.log(`üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –≠–ù–ï–†–ì–ò–ò:`);
        console.log(`   üíé –í—Å–µ–≥–æ –∑–∞—Ä–∞–±–æ—Ç–∞–Ω–æ —Å —ç–Ω–µ—Ä–≥–∏–∏: ${walletStats.totalEnergyPayments.toFixed(2)} TON`);
        console.log(`   üî¢ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–∫—É–ø–æ–∫ —ç–Ω–µ—Ä–≥–∏–∏: ${walletStats.energyTransactions.length}`);
        console.log(`   üíµ –°—Ä–µ–¥–Ω—è—è –ø–æ–∫—É–ø–∫–∞: ${walletStats.energyTransactions.length > 0 ? (walletStats.totalEnergyPayments / walletStats.energyTransactions.length).toFixed(2) : '0'} TON`);
        console.log(`\nüí≥ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞: ${walletStats.totalBalance.toFixed(2)} TON`);

        if (walletStats.lastTransaction) {
            console.log(`\nÔøΩ –ü–æ—Å–ª–µ–¥–Ω—è—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è: ${new Date(walletStats.lastTransaction.utime * 1000).toLocaleString('ru-RU')}`);
        }

    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
async function checkSpecificTransaction(txHash: string) {
    try {
        console.log(`üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é: ${txHash}`);
        
        // –ü–æ–ª—É—á–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏ –∏—â–µ–º –Ω—É–∂–Ω—É—é
        const transactions = await tonClient.getTransactions(YOUR_WALLET, 100);
        const transaction = transactions.find(tx => tx.hash === txHash);

        if (transaction) {
            console.log(`‚úÖ –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞!`);
            console.log(`üí∞ –°—É–º–º–∞: ${transaction.value.toFixed(2)} TON`);
            console.log(`üìÖ –í—Ä–µ–º—è: ${new Date(transaction.utime * 1000).toLocaleString('ru-RU')}`);
            console.log(`üë§ –û—Ç: ${transaction.from || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
            console.log(`üë§ –ö–æ–º—É: ${transaction.to || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}`);
            
            if (transaction.comment && transaction.comment.includes('SECCO Energy')) {
                console.log(`üéÆ –¢–∏–ø: –ü–æ–∫—É–ø–∫–∞ —ç–Ω–µ—Ä–≥–∏–∏ SECCO`);
            }
        } else {
            console.log(`‚ùå –¢—Ä–∞–Ω–∑–∞–∫—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
        }
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—É—â–µ–≥–æ –±–∞–ª–∞–Ω—Å–∞
async function showCurrentBalance() {
    try {
        const balance = await tonClient.getWalletBalance(YOUR_WALLET);
        
        console.log(`\nüí∞ –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å –∫–æ—à–µ–ª—å–∫–∞: ${balance.toFixed(2)} TON`);
        console.log(`   –ê–¥—Ä–µ—Å: ${YOUR_WALLET}`);
        console.log(`   –í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏: ${new Date().toLocaleString('ru-RU')}\n`);
        
        return balance;
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –±–∞–ª–∞–Ω—Å–∞:', error);
        return 0;
    }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏
export { monitorWalletTransactions, checkSpecificTransaction, showCurrentBalance };

// –ï—Å–ª–∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Å–∫—Ä–∏–ø—Ç
if (require.main === module) {
    const command = process.argv[2];
    
    if (command === 'monitor') {
        monitorWalletTransactions();
    } else if (command === 'balance') {
        showCurrentBalance();
    } else if (command === 'check' && process.argv[3]) {
        checkSpecificTransaction(process.argv[3]);
    } else {
        console.log(`
üéÆ SECCO Wallet Monitor

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  npm run monitor-wallet           - –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Å–µ—Ö —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–π
  npm run wallet-balance          - –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å
  npm run check-tx <hash>         - –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏

–ü—Ä–∏–º–µ—Ä—ã:
  npm run monitor-wallet
  npm run wallet-balance
  npm run check-tx abc123def456...
        `);
    }
}
