;; SECCO Energy Purchase Smart Contract - Immediate Transfer Version
;; Все платежи сразу переводятся на кошелек владельца

#include "imports/stdlib.fc";

;; Константы для цен на энергию (в nanoTON)
const energy_price_25 = 500000000;   ;; 0.5 TON
const energy_price_50 = 1000000000;  ;; 1.0 TON  
const energy_price_100 = 2000000000; ;; 2.0 TON

;; Адрес владельца (ваш кошелек)
const owner_address = "UQBOxIuUPXHOu1fY0O7uGe9yIIaa0-DRcLIk2qVNa_0tZbFD"a;

;; op codes
const op::buy_energy_25 = 0x12345601;
const op::buy_energy_50 = 0x12345602;
const op::buy_energy_100 = 0x12345603;

() recv_internal(int my_balance, int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { 
        return ();
    }
    
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) { 
        return ();
    }
    
    slice sender_address = cs~load_msg_addr();
    
    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);
    
    if (op == op::buy_energy_25) {
        ;; Проверяем минимальную сумму
        throw_unless(401, msg_value >= energy_price_25);
        
        ;; Немедленно отправляем TON на ваш кошелек
        var payment_msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(owner_address)
            .store_coins(msg_value - 20000000) ;; Оставляем 0.02 TON на газ для обеих транзакций
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_ref(begin_cell()
                .store_uint(0, 32)
                .store_slice("SECCO Energy: 25 units")
                .end_cell())
            .end_cell();
        send_raw_message(payment_msg, 1);
        
        ;; Отправляем подтверждение игроку
        var response = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(sender_address)
            .store_coins(0)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_uint(0x13579101, 32) ;; success response
            .store_uint(query_id, 64)
            .store_uint(25, 32) ;; количество энергии
            .end_cell();
        send_raw_message(response, 64);
        return ();
    }
    
    if (op == op::buy_energy_50) {
        throw_unless(402, msg_value >= energy_price_50);
        
        var payment_msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(owner_address)
            .store_coins(msg_value - 20000000)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_ref(begin_cell()
                .store_uint(0, 32)
                .store_slice("SECCO Energy: 50 units")
                .end_cell())
            .end_cell();
        send_raw_message(payment_msg, 1);
        
        var response = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(sender_address)
            .store_coins(0)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_uint(0x13579102, 32)
            .store_uint(query_id, 64)
            .store_uint(50, 32)
            .end_cell();
        send_raw_message(response, 64);
        return ();
    }
    
    if (op == op::buy_energy_100) {
        throw_unless(403, msg_value >= energy_price_100);
        
        var payment_msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(owner_address)
            .store_coins(msg_value - 20000000)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_ref(begin_cell()
                .store_uint(0, 32)
                .store_slice("SECCO Energy: 100 units")
                .end_cell())
            .end_cell();
        send_raw_message(payment_msg, 1);
        
        var response = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(sender_address)
            .store_coins(0)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_uint(0x13579103, 32)
            .store_uint(query_id, 64)
            .store_uint(100, 32)
            .end_cell();
        send_raw_message(response, 64);
        return ();
    }
    
    throw(0xffff); ;; неизвестный op code
}

;; Get методы для мониторинга
int get_balance() method_id {
    return get_balance();
}

slice get_owner() method_id {
    return owner_address;
}
